// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package native

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/tracing"
)

var _ = (*balanceChangeMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b balanceChange) MarshalJSON() ([]byte, error) {
	type balanceChange struct {
		Prev   *hexutil.Big                `json:"prev"`
		New    *hexutil.Big                `json:"new"`
		Reason tracing.BalanceChangeReason `json:"reason"`
	}
	var enc balanceChange
	enc.Prev = (*hexutil.Big)(b.Prev)
	enc.New = (*hexutil.Big)(b.New)
	enc.Reason = b.Reason
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *balanceChange) UnmarshalJSON(input []byte) error {
	type balanceChange struct {
		Prev   *hexutil.Big                 `json:"prev"`
		New    *hexutil.Big                 `json:"new"`
		Reason *tracing.BalanceChangeReason `json:"reason"`
	}
	var dec balanceChange
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Prev != nil {
		b.Prev = (*big.Int)(dec.Prev)
	}
	if dec.New != nil {
		b.New = (*big.Int)(dec.New)
	}
	if dec.Reason != nil {
		b.Reason = *dec.Reason
	}
	return nil
}
