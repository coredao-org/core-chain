// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package core

import (
	"encoding/binary"
	"fmt"
	"math/big"
	"reflect"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/systemcontracts"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/params"
	"github.com/holiman/uint256"
)

func getFeeMarketGenesisAlloc(maxRewards, maxEvents uint8, maxGas uint32) (accountAddress common.Address, account types.Account) {
	constantsBytes := make([]byte, 32)
	binary.BigEndian.PutUint32(constantsBytes[24:28], maxGas)
	constantsBytes[29] = maxEvents
	constantsBytes[30] = maxRewards

	return common.HexToAddress(systemcontracts.FeeMarketContract), types.Account{
		Balance: big.NewInt(0),
		Storage: map[common.Hash]common.Hash{
			// store the constant contract slot
			common.HexToHash("0x0000000000000000000000000000000000000000"): common.BytesToHash(constantsBytes),
		},
		Code: common.FromHex("0x608060405234801561001057600080fd5b50600436106102925760003560e01c80637f6381b911610160578063b3ee5a51116100d8578063e1c7392a1161008c578063f050828711610071578063f0508287146105bc578063f9a2bbc7146105cf578063fb5478b3146105d857600080fd5b8063e1c7392a14610594578063e48a5f7b1461059c57600080fd5b8063c55560da116100bd578063c55560da1461056d578063c81b166214610582578063dc927faf1461058b57600080fd5b8063b3ee5a511461055b578063b95493b31461056457600080fd5b8063a78abc161161012f578063ac43175111610114578063ac43175114610536578063b117172414610549578063b3d676f31461055257600080fd5b8063a78abc1614610520578063aa82dce11461052d57600080fd5b80637f6381b9146104e6578063943599fd146104f95780639dc0926214610503578063a3603ef01461050c57600080fd5b8063596fad0c1161020e5780636b3ab955116101c2578063783028a9116101a7578063783028a91461043e578063784a8e14146104475780637997b031146104c657600080fd5b80636b3ab9551461041857806376e5c3ae1461042b57600080fd5b80635ded1bd6116101f35780635ded1bd6146103b35780635f2a9f41146103d85780636911c8a71461040557600080fd5b8063596fad0c1461035f5780635d25e51d146103aa57600080fd5b80632a5d69b2116102655780633f2c0f641161024a5780633f2c0f641461030e57806343756e5c1461032357806354d44bf71461032c57600080fd5b80632a5d69b2146102fc5780633b7681601461030557600080fd5b806304e9e3a41461029757806314c1e1f7146102ca5780632131c68c146102d357806325ee13e2146102f3575b600080fd5b6102a061100781565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6102a061100481565b6003546102a09073ffffffffffffffffffffffffffffffffffffffff1681565b6102a061100581565b6102a061101281565b6102a061101481565b61032161031c366004613f99565b6105ea565b005b6102a061100181565b600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000ff16660f424002050500179055005b61039a61036d366004613e8c565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526001602052604090205416151590565b60405190151581526020016102c1565b6102a061101181565b6000546103c69062010000900460ff1681565b60405160ff90911681526020016102c1565b6000546103f090640100000000900463ffffffff1681565b60405163ffffffff90911681526020016102c1565b610321610413366004613ea6565b6105f8565b610321610426366004613e8c565b610608565b6102a061043936600461405d565b610614565b6102a061100881565b61049a610455366004613e8c565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff1682565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683529015156020830152016102c1565b6104d96104d4366004613fcb565b61064b565b6040516102c19190614323565b6104d96104f4366004613fcb565b61080e565b6102a06201000181565b6102a061100681565b6000546103c6906301000000900460ff1681565b60005461039a9060ff1681565b6102a061101081565b610321610544366004613ff4565b610905565b6102a061100981565b6102a061101381565b6102a061101581565b6102a061101681565b610575611e0f565b6040516102c1919061418c565b6102a061100281565b6102a061100381565b610321611e7e565b6105af6105aa366004613e8c565b611f5e565b6040516102c19190614233565b6103216105ca366004613f17565b6121e9565b6102a061100081565b6000546103c690610100900460ff1681565b6105f482826121f5565b5050565b61060383838361230f565b505050565b61061181612983565b50565b6002818154811061062457600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6040805160608082018352600080835260208301529181019190915273ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090206002015482106106fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f46756e6374696f6e20696e646578206f7574206f6620626f756e64730000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902060020180548390811061074557634e487b7160e01b600052603260045260246000fd5b6000918252602080832060408051606081018252600390940290910180548452600181015463ffffffff1684840152600281018054835181860281018601855281815295969295938701949192909184015b828210156107ff576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900461ffff1681830152825260019092019101610797565b50505091525090949350505050565b6040805160608082018352600080835260208301529181019190915273ffffffffffffffffffffffffffffffffffffffff83166000908152600160208190526040909120015482106108bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4576656e7420696e646578206f7574206f6620626f756e64730000000000000060448201526064016106f4565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602081905260409091200180548390811061074557634e487b7160e01b600052603260045260246000fd5b60005460ff16610971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f74686520636f6e7472616374206e6f7420696e6974207965740000000000000060448201526064016106f4565b3361100614610a02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f746865206d73672073656e646572206d75737420626520676f7665726e616e6360448201527f6520636f6e74726163740000000000000000000000000000000000000000000060648201526084016106f4565b610a7684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600981527f616464436f6e666967000000000000000000000000000000000000000000000060208201529150612c619050565b15610edd576000610ac4610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b612ce7565b90508051600314610b055784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b6000610b3882600081518110610b2b57634e487b7160e01b600052603260045260246000fd5b6020026020010151612e19565b90506000610b6d83600181518110610b6057634e487b7160e01b600052603260045260246000fd5b6020026020010151612ce7565b90506000815167ffffffffffffffff811115610b9957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610be657816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610bb75790505b50905060005b8251811015610e7d576000610c1a848381518110610b6057634e487b7160e01b600052603260045260246000fd5b90506000610c4282600081518110610b6057634e487b7160e01b600052603260045260246000fd5b5167ffffffffffffffff811115610c6957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cae57816020015b6040805180820190915260008082526020820152815260200190600190039081610c875790505b50905060005b8151811015610dc8576000610d05610ce685600081518110610b6057634e487b7160e01b600052603260045260246000fd5b8381518110610b6057634e487b7160e01b600052603260045260246000fd5b90506040518060400160405280610d3683600081518110610b2b57634e487b7160e01b600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff168152602001610d8283600181518110610d7557634e487b7160e01b600052603260045260246000fd5b6020026020010151612e39565b61ffff16815250838381518110610da957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080610dc090614447565b915050610cb4565b506040518060600160405280610e0584600181518110610df857634e487b7160e01b600052603260045260246000fd5b6020026020010151612f20565b8152602001610e2e84600281518110610d7557634e487b7160e01b600052603260045260246000fd5b63ffffffff16815260200182815250848481518110610e5d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050508080610e7590614447565b915050610bec565b506040805160008082526020820190925281610ec3565b60408051606080820183526000808352602083015291810191909152815260200190600190039081610e945790505b509050610ed38483836001612f37565b5050505050611e09565b610f5184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600c81527f72656d6f7665436f6e666967000000000000000000000000000000000000000060208201529150612c619050565b15611013576000610f9a610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b90508051600114610fdb5784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b600061100182600081518110610b2b57634e487b7160e01b600052603260045260246000fd5b905061100c81612983565b5050611e09565b61108784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600c81527f757064617465436f6e666967000000000000000000000000000000000000000060208201529150612c619050565b1561148a5760006110d0610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b905080516003146111115784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b600061113782600081518110610b2b57634e487b7160e01b600052603260045260246000fd5b9050600061115f83600181518110610b6057634e487b7160e01b600052603260045260246000fd5b90506000815167ffffffffffffffff81111561118b57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156111d857816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816111a95790505b50905060005b825181101561143657600061120c848381518110610b6057634e487b7160e01b600052603260045260246000fd5b9050600061123482600081518110610b6057634e487b7160e01b600052603260045260246000fd5b5167ffffffffffffffff81111561125b57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112a057816020015b60408051808201909152600080825260208201528152602001906001900390816112795790505b50905060005b815181101561138e5760006112d8610ce685600081518110610b6057634e487b7160e01b600052603260045260246000fd5b9050604051806040016040528061130983600081518110610b2b57634e487b7160e01b600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff16815260200161134883600181518110610d7557634e487b7160e01b600052603260045260246000fd5b61ffff1681525083838151811061136f57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061138690614447565b9150506112a6565b5060405180606001604052806113be84600181518110610df857634e487b7160e01b600052603260045260246000fd5b81526020016113e784600281518110610d7557634e487b7160e01b600052603260045260246000fd5b63ffffffff1681526020018281525084848151811061141657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061142e90614447565b9150506111de565b50604080516000808252602082019092528161147c565b6040805160608082018352600080835260208301529181019190915281526020019060019003908161144d5790505b509050610ed384838361230f565b6114fe84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600d81527f73657444414f416464726573730000000000000000000000000000000000000060208201529150612c619050565b15611620576000611547610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b905080516001146115885784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b6115ac81600081518110610b2b57634e487b7160e01b600052603260045260246000fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556040517ff9b3cbeb3bdd24673258d20e88f4c1882492825fb36a855081a58ed2d9fb87bd90600090a150611e09565b61169484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600f81527f736574436f6e666967537461747573000000000000000000000000000000000060208201529150612c619050565b156117b65760006116dd610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b9050805160021461171e5784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b600061174482600081518110610b2b57634e487b7160e01b600052603260045260246000fd5b905060006117798360018151811061176c57634e487b7160e01b600052603260045260246000fd5b6020026020010151613639565b905061178582826121f5565b6040517ff9b3cbeb3bdd24673258d20e88f4c1882492825fb36a855081a58ed2d9fb87bd90600090a1505050611e09565b61182a84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601b81527f757064617465644d6178696d756d52657761726441646472657373000000000060208201529150612c619050565b1561193b576000611873610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b905080516001146118b45784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b60006118da82600081518110610d7557634e487b7160e01b600052603260045260246000fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010060ff8416021781556040519192507ff9b3cbeb3bdd24673258d20e88f4c1882492825fb36a855081a58ed2d9fb87bd91a15050611e09565b6119af84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600f81527f7570646174654d61784576656e7473000000000000000000000000000000000060208201529150612c619050565b15611ac15760006119f8610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b90508051600114611a395784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b6000611a5f82600081518110610d7557634e487b7160e01b600052603260045260246000fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000060ff8416021781556040519192507ff9b3cbeb3bdd24673258d20e88f4c1882492825fb36a855081a58ed2d9fb87bd91a15050611e09565b611b3584848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600c81527f7570646174654d6178476173000000000000000000000000000000000000000060208201529150612c619050565b15611c4c576000611b7e610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b90508051600114611bbf5784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b6000611be582600081518110610d7557634e487b7160e01b600052603260045260246000fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff1664010000000063ffffffff8416021781556040519192507ff9b3cbeb3bdd24673258d20e88f4c1882492825fb36a855081a58ed2d9fb87bd91a15050611e09565b611cc084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601281527f7570646174654d617846756e6374696f6e73000000000000000000000000000060208201529150612c619050565b15611dd3576000611d09610abf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cba92505050565b90508051600114611d4a5784846040517fad23613c0000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b6000611d7082600081518110610d7557634e487b7160e01b600052603260045260246000fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff16630100000060ff8416021781556040519192507ff9b3cbeb3bdd24673258d20e88f4c1882492825fb36a855081a58ed2d9fb87bd91a15050611e09565b83836040517f64b4f6040000000000000000000000000000000000000000000000000000000081526004016106f49291906141e6565b50505050565b60606002805480602002602001604051908101604052809291908181526020018280548015611e7457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611e49575b5050505050905090565b60005460ff1615611eeb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f74686520636f6e747261637420616c726561647920696e69740000000000000060448201526064016106f4565b600380547fffffffffffffffffffffffff000000000000000000000000000000000000000016737e5c92fa765aac46042afbba05b0f3846c61942317905560008054660f4240050505017fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909116179055565b604080516080810182526000808252602082015260609181018290528181019190915273ffffffffffffffffffffffffffffffffffffffff82811660009081526001602081815260408084208151608081018352815496871681527401000000000000000000000000000000000000000090960460ff1615158684015292830180548251818502810185018452818152949592870194939192909184015b828210156120d55760008481526020808220604080516060810182526003870290920180548352600181015463ffffffff168385015260028101805483518187028101870185528181529496929593870194939192909184015b828210156120be576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900461ffff1681830152825260019092019101612056565b505050508152505081526020019060010190611ffc565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156121db5760008481526020808220604080516060810182526003870290920180548352600181015463ffffffff168385015260028101805483518187028101870185528181529496929593870194939192909184015b828210156121c4576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900461ffff168183015282526001909201910161215c565b505050508152505081526020019060010190612102565b505050915250909392505050565b611e0984848484612f37565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160205260409020541661226b576040517f70de323100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016106f4565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260016020908152604080832080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000871515021790558051838152918201929092527f57d4073099735e9cca8e792596cbbfe773a7d12a5efcd88c7a2cf3e0a8eba005910160405180910390a25050565b73ffffffffffffffffffffffffffffffffffffffff83811660009081526001602052604090205416612385576040517f70de323100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106f4565b60005482516201000090910460ff161080156123a15750815115155b156123d8576040517f2eb6de7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000548151630100000090910460ff161015612420576040517f2eb6de7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b825181101561251e57600060019054906101000a900460ff1660ff1683828151811061245f57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515111156124a4576040517fede0c82900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6124d88382815181106124c757634e487b7160e01b600052603260045260246000fd5b60200260200101516040015161366d565b61250c8382815181106124fb57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151613708565b8061251681614447565b915050612423565b5073ffffffffffffffffffffffffffffffffffffffff8316600090815260016020819052604082209161255391830190613b48565b612561600282016000613b69565b825160005b81811015612740576001808401805491820181556000908152602090208651600390920201908690839081106125ac57634e487b7160e01b600052603260045260246000fd5b602090810291909101015151815585518690839081106125dc57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060005b86838151811061262d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515181101561272b578160020187848151811061266557634e487b7160e01b600052603260045260246000fd5b602002602001015160400151828151811061269057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845292829020815193018054919092015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff909316929092179190911790558061272381614447565b91505061260d565b5050808061273890614447565b915050612566565b5060005b8351811015612920576002830180546001810182556000918252602090912085516003909202019085908390811061278c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015151815584518590839081106127bc57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060005b85838151811061280d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515181101561290b578160020186848151811061284557634e487b7160e01b600052603260045260246000fd5b602002602001015160400151828151811061287057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845292829020815193018054919092015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff909316929092179190911790558061290381614447565b9150506127ed565b5050808061291890614447565b915050612744565b508473ffffffffffffffffffffffffffffffffffffffff167f57d4073099735e9cca8e792596cbbfe773a7d12a5efcd88c7a2cf3e0a8eba00585518551604051612974929190918252602082015260400190565b60405180910390a25050505050565b73ffffffffffffffffffffffffffffffffffffffff818116600090815260016020526040902054166129f9576040517f70de323100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016106f4565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160208190526040822080547fffffffffffffffffffffff0000000000000000000000000000000000000000001681559190612a5490830182613b48565b612a62600283016000613b69565b505060005b600254811015612c1c578173ffffffffffffffffffffffffffffffffffffffff1660028281548110612aa957634e487b7160e01b600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415612c0a5760028054612ae19060019061440d565b81548110612aff57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169183908110612b4657634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002805480612bad57634e487b7160e01b600052603160045260246000fd5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055612c1c565b80612c1481614447565b915050612a67565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907ffa4916915eacf8b6e0ee6ac8171bdacc0db148dced1dd16904e17d32a10b3eae90600090a250565b600081604051602001612c749190614153565b6040516020818303038152906040528051906020012083604051602001612c9b9190614153565b6040516020818303038152906040528051906020012014905092915050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6060612cf28261375e565b612cfb57600080fd5b6000612d0683613797565b905060008167ffffffffffffffff811115612d3157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612d7657816020015b6040805180820190915260008082526020820152815260200190600190039081612d4f5790505b5090506000612d88856020015161381a565b8560200151612d9791906143f5565b90506000805b84811015612e0e57612dae8361389c565b9150604051806040016040528083815260200184815250848281518110612de557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152612dfa82846143f5565b925080612e0681614447565b915050612d9d565b509195945050505050565b8051600090601514612e2a57600080fd5b612e3382612e39565b92915050565b805160009015801590612e4e57508151602110155b612e5757600080fd5b6000612e66836020015161381a565b90508083600001511015612ed6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6c656e677468206973206c657373207468616e206f666673657400000000000060448201526064016106f4565b8251600090612ee690839061440d565b9050600080838660200151612efb91906143f5565b9050805191506020831015612f1757826020036101000a820491505b50949350505050565b600080612f2c83613a21565b602001519392505050565b73ffffffffffffffffffffffffffffffffffffffff8481166000908152600160205260409020541615612fae576040517fdb36a8f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106f4565b60005483516201000090910460ff161015612ff5576040517f2eb6de7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825161302d576040517f4b8cc0ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000548251630100000090910460ff161015613075576040517f2eb6de7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b835181101561315157600060019054906101000a900460ff1660ff168482815181106130b457634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515111156130f9576040517fede0c82900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61311c8482815181106124c757634e487b7160e01b600052603260045260246000fd5b61313f8482815181106124fb57634e487b7160e01b600052603260045260246000fd5b8061314981614447565b915050613078565b5073ffffffffffffffffffffffffffffffffffffffff8416600081815260016020526040812080547fffffffffffffffffffffff0000000000000000000000000000000000000000001690921774010000000000000000000000000000000000000000841515021782558451905b818110156133995760018084018054918201815560009081526020902087516003909202019087908390811061320557634e487b7160e01b600052603260045260246000fd5b6020908102919091010151518155865187908390811061323557634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060005b87838151811061328657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515181101561338457816002018884815181106132be57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015182815181106132e957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845292829020815193018054919092015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff909316929092179190911790558061337c81614447565b915050613266565b5050808061339190614447565b9150506131bf565b5060005b845181101561357957600283018054600181018255600091825260209091208651600390920201908690839081106133e557634e487b7160e01b600052603260045260246000fd5b6020908102919091010151518155855186908390811061341557634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060005b86838151811061346657634e487b7160e01b600052603260045260246000fd5b60200260200101516040015151811015613564578160020187848151811061349e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015182815181106134c957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845292829020815193018054919092015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff909316929092179190911790558061355c81614447565b915050613446565b5050808061357190614447565b91505061339d565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff88167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155855185516040517f57d4073099735e9cca8e792596cbbfe773a7d12a5efcd88c7a2cf3e0a8eba0059261362992908252602082015260400190565b60405180910390a2505050505050565b805160009060011461364a57600080fd5b6020820151805160001a908115613662576001613665565b60005b949350505050565b6000805b82518110156136c95782818151811061369a57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff16826136b591906143f5565b9150806136c181614447565b915050613671565b5061271081146105f4576040517f1c8868d0000000000000000000000000000000000000000000000000000000008152600481018290526024016106f4565b60005463ffffffff64010000000090910481169082161115610611576040517f191aa42a00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526024016106f4565b805160009061376f57506000919050565b6020820151805160001a9060c082101561378d575060009392505050565b5060019392505050565b80516000906137a857506000919050565b6000806137b8846020015161381a565b84602001516137c791906143f5565b90506000846000015185602001516137df91906143f5565b90505b80821015613811576137f38261389c565b6137fd90836143f5565b91508261380981614447565b9350506137e2565b50909392505050565b8051600090811a60808110156138335750600092915050565b60b881108061384e575060c0811080159061384e575060f881105b1561385c5750600192915050565b60c081101561389057613871600160b8614424565b61387e9060ff168261440d565b6138899060016143f5565b9392505050565b613871600160f8614424565b80516000908190811a60808110156138b75760019150613a1a565b60b88110156138dd576138cb60808261440d565b6138d69060016143f5565b9150613a1a565b60c081101561397857600060b78203600186019550806020036101000a865104915060018101820193505080831015613972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6164646974696f6e206f766572666c6f7700000000000000000000000000000060448201526064016106f4565b50613a1a565b60f881101561398c576138cb60c08261440d565b600060f78203600186019550806020036101000a865104915060018101820193505080831015613a18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6164646974696f6e206f766572666c6f7700000000000000000000000000000060448201526064016106f4565b505b5092915050565b8051606090613a2f57600080fd5b6000613a3e836020015161381a565b90506000818460000151613a52919061440d565b905060008167ffffffffffffffff811115613a7d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613aa7576020820181803683370190505b5090506000816020019050612f17848760200151613ac591906143f5565b828580613ad157505050565b60208110613b095782518252613ae86020846143f5565b9250613af56020836143f5565b9150613b0260208261440d565b9050613ad1565b915181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169216919091179052565b50805460008255600302906000526020600020908101906106119190613b8a565b50805460008255600302906000526020600020908101906106119190613bdb565b80821115613bd75760008082556001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055613bce6002830182613c28565b50600301613b8a565b5090565b80821115613bd75760008082556001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055613c1f6002830182613c28565b50600301613bdb565b508054600082559060005260206000209081019061061191905b80821115613bd75780547fffffffffffffffffffff00000000000000000000000000000000000000000000168155600101613c42565b803573ffffffffffffffffffffffffffffffffffffffff81168114613c9c57600080fd5b919050565b600082601f830112613cb1578081fd5b81356020613cc6613cc1836143d1565b614382565b80838252828201915082860187848660051b8901011115613ce5578586fd5b855b85811015613d2657813567ffffffffffffffff811115613d05578788fd5b613d138a87838c0101613d8a565b8552509284019290840190600101613ce7565b5090979650505050505050565b80358015158114613c9c57600080fd5b60008083601f840112613d54578182fd5b50813567ffffffffffffffff811115613d6b578182fd5b602083019150836020828501011115613d8357600080fd5b9250929050565b600060608284031215613d9b578081fd5b613da3614336565b90508135815260208083013563ffffffff81168114613dc157600080fd5b8282015260408381013567ffffffffffffffff811115613de057600080fd5b8401601f81018613613df157600080fd5b8035613dff613cc1826143d1565b80828252858201915085840189878560061b8701011115613e1f57600080fd5b600094505b83851015613e7a5785818b031215613e3b57600080fd5b613e4361435f565b613e4c82613c78565b81528782013561ffff81168114613e6257600080fd5b81890152835260019490940193918601918501613e24565b50808588015250505050505092915050565b600060208284031215613e9d578081fd5b61388982613c78565b600080600060608486031215613eba578182fd5b613ec384613c78565b9250602084013567ffffffffffffffff80821115613edf578384fd5b613eeb87838801613ca1565b93506040860135915080821115613f00578283fd5b50613f0d86828701613ca1565b9150509250925092565b60008060008060808587031215613f2c578081fd5b613f3585613c78565b9350602085013567ffffffffffffffff80821115613f51578283fd5b613f5d88838901613ca1565b94506040870135915080821115613f72578283fd5b50613f7f87828801613ca1565b925050613f8e60608601613d33565b905092959194509250565b60008060408385031215613fab578182fd5b613fb483613c78565b9150613fc260208401613d33565b90509250929050565b60008060408385031215613fdd578182fd5b613fe683613c78565b946020939093013593505050565b60008060008060408587031215614009578182fd5b843567ffffffffffffffff80821115614020578384fd5b61402c88838901613d43565b90965094506020870135915080821115614044578384fd5b5061405187828801613d43565b95989497509550505050565b60006020828403121561406e578081fd5b5035919050565b600081518084526020808501808196508360051b81019150828601855b858110156140bc5782840389526140aa8483516140c9565b98850198935090840190600101614092565b5091979650505050505050565b60006060830182518452602063ffffffff81850151168186015260408085015160608288015283815180865260808901915084830195508692505b80831015614147578551805173ffffffffffffffffffffffffffffffffffffffff16835285015161ffff1685830152948401946001929092019190830190614104565b50979650505050505050565b60008251815b818110156141735760208186018101518583015201614159565b818111156141815782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156141da57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016141a8565b50909695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000602080835260a0830173ffffffffffffffffffffffffffffffffffffffff85511682850152818501511515604085015260408501516080606086015281815180845260c08701915060c08160051b88010193508483019250855b818110156142db577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408886030183526142c98585516140c9565b9450928501929185019160010161428f565b50505050606085015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084820301608085015261431a8183614075565b95945050505050565b60208152600061388960208301846140c9565b6040516060810167ffffffffffffffff8111828210171561435957614359614496565b60405290565b6040805190810167ffffffffffffffff8111828210171561435957614359614496565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156143c9576143c9614496565b604052919050565b600067ffffffffffffffff8211156143eb576143eb614496565b5060051b60200190565b6000821982111561440857614408614480565b500190565b60008282101561441f5761441f614480565b500390565b600060ff821660ff84168082101561443e5761443e614480565b90039392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561447957614479614480565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dbc9d005fcd47e04887d21b6a94650e5bb5139a679d09bcaa6f33fa90a4f427764736f6c63430008040033"),
	}
}

// addNewFeeMarketFullFlowTxs Add all the transactions for the full flow of the fee market. That is add contract, add fee market configuration, call contract.
func addNewFeeMarketFullFlowTxs(t testing.TB, feeMarketAddress common.Address, rewardRecipient common.Address, nonce uint64, gasPrice *big.Int, chain *BlockChain, b *BlockGen, signer types.Signer) (tx *types.Transaction, contractAddress common.Address) {
	// Deploy counter contract
	tx, counterContractAddress := addFeeMarketTestContract(t, nonce, gasPrice, chain, b, signer)
	fmt.Println("counterContractAddress:", counterContractAddress)

	// Add configuration for the deployed contract
	addFeeMarketConfigurationTx(t, feeMarketAddress, counterContractAddress, rewardRecipient, nonce, gasPrice, chain, b, signer)

	// Call contract
	callData := createContractCallData("increment()", nil)
	addFeeMarketContractCall(t, counterContractAddress, callData, nonce, nil, gasPrice, chain, b, signer)

	return
}

// addFeeMarketTestContract Deploy a test contract
func addFeeMarketTestContract(t testing.TB, nonce uint64, gasPrice *big.Int, chain *BlockChain, b *BlockGen, signer types.Signer) (tx *types.Transaction, contractAddress common.Address) {
	/*
		pragma solidity ^0.8.4;
		contract Counter {
			uint256 public number;

			event Increment(uint256 number);
			event Transfer(address from, address to, uint256 amount);

			function init() external {
				number = 10;
			}

			function increment() public {
				number++;
				emit Increment(number);
			}

			function mint(uint256 num) public {
					emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, num);
			}

			function transfer(uint256 num) public {
					emit Transfer(msg.sender, 0x0000000000000000000000000000000000000001, num);
			}

			function zeroTransfer() public {
				emit Transfer(msg.sender, 0x0000000000000000000000000000000000000002, 0);
			}

			function eventsEmitter(uint256 num) public {
				for (uint256 i = 0; i < num; i++) {
					emit Increment(i);
				}
			}
		}
	*/
	counterBIN := common.Hex2Bytes("608060405234801561001057600080fd5b506102cc806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a50ed97e1161005b578063a50ed97e146100c5578063d09de08a146100cd578063e1c7392a146100d5578063f00543ea146100df57600080fd5b806312514bba146100825780638381f58a14610097578063a0712d68146100b2575b600080fd5b610095610090366004610257565b6100f2565b005b6100a060005481565b60405190815260200160405180910390f35b6100956100c0366004610257565b610137565b610095610175565b6100956101bc565b610095600a600055565b6100956100ed366004610257565b610203565b60408051338152600160208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906060015b60405180910390a150565b60408051600081523360208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060600161012c565b60408051338152600260208201526000918101919091527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906060015b60405180910390a1565b6000805490806101cb8361026f565b91905055507f51af157c2eee40f68107a47a49c32fbbeb0a3c9e5cd37aa56e88e6be92368a816000546040516101b291815260200190565b60005b81811015610253576040518181527f51af157c2eee40f68107a47a49c32fbbeb0a3c9e5cd37aa56e88e6be92368a819060200160405180910390a18061024b8161026f565b915050610206565b5050565b600060208284031215610268578081fd5b5035919050565b600060001982141561028f57634e487b7160e01b81526011600452602481fd5b506001019056fea26469706673582212206c14e484a2aec35ba3082c32b95e0f74970c58e688885b8eba7f9ec131e9abc664736f6c63430008040033")
	// Deploy counter contract
	tx, _ = types.SignNewTx(testKey, signer, &types.LegacyTx{
		Nonce:    nonce,
		GasPrice: gasPrice,
		Gas:      250_000,
		Data:     counterBIN,
	})
	b.AddTxWithChain(chain, tx)
	contractAddress = crypto.CreateAddress(testAddr, nonce)
	return tx, contractAddress
}

// addFeeMarketConfigurationTx Add a fee market configuration transaction
func addFeeMarketConfigurationTx(t testing.TB, feeMarketAddress common.Address, configuredContractAddress common.Address, rewardRecipient common.Address, nonce uint64, gasPrice *big.Int, chain *BlockChain, b *BlockGen, signer types.Signer) (tx *types.Transaction) {
	// Topic | Event Signature | Gas
	// Increment(uint256) | 51af157c2eee40f68107a47a49c32fbbeb0a3c9e5cd37aa56e88e6be92368a81 | 10000
	// Transfer(address,address,uint256) | ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef | 20000

	// Add configuration for the deployed contract
	configurationAddConfig := "f0508287000000000000000000000000<contract_address>00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010051af157c2eee40f68107a47a49c32fbbeb0a3c9e5cd37aa56e88e6be92368a81000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000<reward_recipient>0000000000000000000000000000000000000000000000000000000000002710ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000<reward_recipient>00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000"

	// Replace the configuredContractAddress in add config call data
	configurationAddConfig = strings.ReplaceAll(configurationAddConfig, "<contract_address>", configuredContractAddress.Hex()[2:])

	// Add custom rewards address
	configurationAddConfig = strings.ReplaceAll(configurationAddConfig, "<reward_recipient>", rewardRecipient.Hex()[2:])

	tx, _ = types.SignNewTx(testKey, signer, &types.LegacyTx{
		Nonce:    nonce,
		GasPrice: gasPrice,
		Gas:      303_500,
		To:       &feeMarketAddress,
		Data:     common.Hex2Bytes(configurationAddConfig),
	})
	b.AddTxWithChain(chain, tx)
	return tx
}

// updateFeeMarketConfigurationTx Update a fee market configuration transaction
func updateFeeMarketConfigurationTx(t testing.TB, feeMarketAddress common.Address, configuredContractAddress common.Address, rewardRecipient common.Address, nonce uint64, gasPrice *big.Int, chain *BlockChain, b *BlockGen, signer types.Signer) (tx *types.Transaction) {
	// Update configuration for the deployed contract
	// configurationUpdateConfig := "6b3ab955000000000000000000000000<contract_address>"

	configurationUpdateConfig := "6911c8a7000000000000000000000000<contract_address>0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010051af157c2eee40f68107a47a49c32fbbeb0a3c9e5cd37aa56e88e6be92368a81000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000<reward_recipient>0000000000000000000000000000000000000000000000000000000000002710ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000<reward_recipient>00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000"

	// Replace the configuredContractAddress in add config call data
	configurationUpdateConfig = strings.ReplaceAll(configurationUpdateConfig, "<contract_address>", configuredContractAddress.Hex()[2:])

	// Add custom rewards address
	configurationUpdateConfig = strings.ReplaceAll(configurationUpdateConfig, "<reward_recipient>", rewardRecipient.Hex()[2:])

	tx, _ = types.SignNewTx(testKey, signer, &types.LegacyTx{
		Nonce:    nonce,
		GasPrice: gasPrice,
		Gas:      75_000,
		To:       &feeMarketAddress,
		Data:     common.Hex2Bytes(configurationUpdateConfig),
	})
	b.AddTxWithChain(chain, tx)
	return tx
}

// removeFeeMarketConfigurationTx Remove a fee market configuration transaction
func removeFeeMarketConfigurationTx(t testing.TB, feeMarketAddress common.Address, configuredContractAddress common.Address, nonce uint64, gasPrice *big.Int, chain *BlockChain, b *BlockGen, signer types.Signer) (tx *types.Transaction) {
	// Remove configuration for the deployed contract
	configurationRemoveConfig := "6b3ab955000000000000000000000000<contract_address>"

	// Replace the configuredContractAddress in add config call data
	configurationRemoveConfig = strings.ReplaceAll(configurationRemoveConfig, "<contract_address>", configuredContractAddress.Hex()[2:])

	tx, _ = types.SignNewTx(testKey, signer, &types.LegacyTx{
		Nonce:    nonce,
		GasPrice: gasPrice,
		Gas:      60_000,
		To:       &feeMarketAddress,
		Data:     common.Hex2Bytes(configurationRemoveConfig),
	})
	b.AddTxWithChain(chain, tx)
	return tx
}

func createContractCallData(name string, value interface{}) []byte {
	methodID := crypto.Keccak256([]byte(name))[:4]
	fmt.Println("methodID:", hex.EncodeToString(methodID))
	if value != nil {
		// use reflect to get the type of the argument
		v := reflect.ValueOf(value)
		valueType := reflect.TypeOf(value)
		switch valueType.Kind() {
		case reflect.Uint32:
			inputBytes := make([]byte, 32)
			binary.BigEndian.PutUint32(inputBytes[24:], value.(uint32))
			return append(methodID, inputBytes...)
		case reflect.Ptr:
			inputBytes := math.U256Bytes(new(big.Int).Set(v.Interface().(*big.Int)))
			return append(methodID, inputBytes...)
		}
	}
	return methodID
}

// addFeeMarketContractCall Call a contract
func addFeeMarketContractCall(t testing.TB, contractAddress common.Address, data []byte, nonce uint64, specificGasLimit *uint64, gasPrice *big.Int, chain *BlockChain, b *BlockGen, signer types.Signer) (tx *types.Transaction) {
	// fmt.Println("data:", common.Bytes2Hex(data))
	// func						| funcSig 	| initialGas 	| Gas
	// increment			| 3fb5c1cb	| 59616 			| 42516
	// transfer				| ddf252ad	| 23299 			| 16000
	// zeroTransfer		| a50ed97e	|							| 47147
	// eventsEmitter	| 90d6510c	|							| 40000000
	gas := uint64(160_000)
	if specificGasLimit != nil {
		gas = *specificGasLimit
	}
	tx, _ = types.SignNewTx(testKey, signer, &types.LegacyTx{
		Nonce:    nonce,
		GasPrice: gasPrice,
		Gas:      gas,
		To:       &contractAddress,
		Data:     data,
	})
	b.AddTxWithChain(chain, tx)
	return tx
}

// TestFeeMarketGasPoolExpansion tests that the fee market expands the block beyond its limits for the amount of distributed gas
func TestFeeMarketGasPoolExpansion(t *testing.T) {
	blockGasLimit := uint64(3_000_000)

	rewardRecipientMap := make(map[uint64]map[common.Address]uint64)
	remainingGasPoolMap := make(map[uint64]uint64)

	createGenRandomFn := func(withConfig bool) func(*params.ChainConfig, *BlockChain, common.Address) func(int, *BlockGen) {
		return func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(i int, gen *BlockGen) {
			return func(i int, gen *BlockGen) {
				signer := types.LatestSigner(config)
				fee := big.NewInt(1)
				gen.SetCoinbase(common.Address{1})

				blockNumber := gen.Number().Uint64()
				rewardRecipientMap[blockNumber] = make(map[common.Address]uint64)

				rewardRecipient := common.BytesToAddress(crypto.Keccak256([]byte(fmt.Sprintf("recipient-%d", i))))

				// Deploy counter contract
				_, counterContractAddress := addFeeMarketTestContract(t, gen.TxNonce(testAddr), fee, chain, gen, signer)

				// Add configuration only if enabled
				if withConfig {
					addFeeMarketConfigurationTx(t, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)
				}

				callData := createContractCallData("increment()", 0)

				// Send calls to the deploy contract until block is full
				for y := 0; gen.gasPool.Gas() > 500_000; y++ {
					addFeeMarketContractCall(t, counterContractAddress, callData, gen.TxNonce(testAddr), nil, fee, chain, gen, signer)
					rewardRecipientMap[blockNumber][rewardRecipient]++
				}

				remainingGasPoolMap[blockNumber] = gen.gasPool.Gas()
			}
		}
	}

	chainTesterFn := func(withConfig bool) func(chain *BlockChain, blocks []*types.Block) {
		return func(chain *BlockChain, blocks []*types.Block) {
			stateDB, err := chain.State()
			if err != nil {
				t.Fatalf("failed to get state: %v", err)
			}

			for _, block := range blocks {
				receipts := chain.GetReceiptsByHash(block.Hash())

				fmt.Println("Start Block number:", block.Number().Uint64(), "txs:", len(receipts), "withConfig:", withConfig)

				// Calculate full gas used from receipts
				txGasUsed := uint64(0)
				for idx, receipt := range receipts {
					txGasUsed += receipt.GasUsed
					if idx == len(receipts)-1 {
						fmt.Println("\tLast TX receipt gasUsed:", receipt.GasUsed)
					}
					if receipt.Status == types.ReceiptStatusFailed {
						t.Errorf("transaction failed tx_hash: %s, status: %d, gasUsed: %d", receipt.TxHash.Hex(), receipt.Status, receipt.GasUsed)
					}
				}

				// Check if block gas used reports the sum of all txs gas used
				if block.GasUsed() != txGasUsed {
					t.Fatalf("block.GasUsed() %d doesn't match txGasUsed %d", block.GasUsed(), txGasUsed)
				}

				// Calculate the total amount of fees paid as fee market rewards
				distributedAmount := uint256.NewInt(0)
				if withConfig {
					blockRecepients := rewardRecipientMap[block.Number().Uint64()]
					for recipient, numberOfTxs := range blockRecepients {
						actual := stateDB.GetBalance(recipient)
						distributedAmount.Add(distributedAmount, actual)

						// TODO: make gas 100000 configurable
						expect := numberOfTxs * 10_000
						require.Equal(t, expect, actual.Uint64(),
							fmt.Sprintf("recipient (%s) balance %d is different that expected fee market reward %d (numberOfTxs: %d)", recipient.Hex(), actual.Uint64(), expect, numberOfTxs))
					}
				}

				// Get the remaining gas in the pool
				remainingBlockPoolGas := remainingGasPoolMap[block.Number().Uint64()]
				distributedAmountU64 := distributedAmount.Uint64()

				// Check if block gas pool expands as expected to fit more transactions when distributed gas exists (aka ghost gas)
				if withConfig {
					if txGasUsed-distributedAmountU64+remainingBlockPoolGas != blockGasLimit {
						t.Fatalf("block gas limit %d doesn't fit txGasUsed %d, with included distributed gas %d", blockGasLimit, txGasUsed, distributedAmountU64)
					}
				} else {
					if txGasUsed+remainingBlockPoolGas != blockGasLimit {
						t.Fatalf("block gas limit %d with remaining gas %d is not equal to txGasUsed %d", blockGasLimit, remainingBlockPoolGas, txGasUsed)
					}
				}

				fmt.Println("End Block number:", block.Number().Uint64(), "withConfig:", withConfig, "txGasUsed:", txGasUsed, "distributedAmountU64:", distributedAmountU64, "remainingBlockPoolGas:", remainingBlockPoolGas)
			}
		}
	}

	t.Run("WithConfiguration", func(t *testing.T) {
		testFeeMarketBlock(t, blockGasLimit, 1, createGenRandomFn(true), chainTesterFn(true))
	})

	t.Run("WithoutConfiguration", func(t *testing.T) {
		testFeeMarketBlock(t, blockGasLimit, 1, createGenRandomFn(false), chainTesterFn(false))
	})
}

// TestFeeMarketMultiContractsBlock tests that the fee market operates correctly with multiple contracts that has configurations
func TestFeeMarketMultiContractsBlock(t *testing.T) {
	// Set up logger to write to stdout at trace level
	// glogger := log.NewGlogHandler(log.NewTerminalHandler(os.Stdout, false))
	// glogger.Verbosity(log.LevelTrace)
	// log.SetDefault(log.NewLogger(glogger))

	blockGasLimit := uint64(50_000_000)

	// rewardRecipientMap[blockNumber][rewardRecipient] = numberOfTxs
	rewardRecipientMap := make(map[uint64]map[common.Address]uint64)
	remainingGasPoolMap := make(map[uint64]uint64)

	createGenRandomFn := func(withConfig bool) func(*params.ChainConfig, *BlockChain, common.Address) func(int, *BlockGen) {
		return func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(i int, gen *BlockGen) {
			return func(i int, gen *BlockGen) {
				signer := types.LatestSigner(config)
				fee := big.NewInt(1)
				gen.SetCoinbase(common.Address{1})

				blockNumber := gen.Number().Uint64()
				rewardRecipientMap[blockNumber] = make(map[common.Address]uint64)

				// TODO: this test will randomly update and delete configs
				callData := createContractCallData("increment()", 0)

				for y := 0; gen.gasPool.Gas() > 550_000; y++ {
					var counterContractAddress common.Address
					rewardRecipient := common.BytesToAddress(crypto.Keccak256([]byte(fmt.Sprintf("recipient-%d", y))))

					// Deploy counter contract
					_, counterContractAddress = addFeeMarketTestContract(t, gen.TxNonce(testAddr), fee, chain, gen, signer)

					// Add configuration only if enabled
					if withConfig {
						addFeeMarketConfigurationTx(t, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)
					}

					// Add transactions until the block is full
					for z := 0; gen.gasPool.Gas() > 550_000 && z < 4; z++ {
						addFeeMarketContractCall(t, counterContractAddress, callData, gen.TxNonce(testAddr), nil, fee, chain, gen, signer)
						rewardRecipientMap[blockNumber][rewardRecipient]++
					}
				}

				remainingGasPoolMap[blockNumber] = gen.gasPool.Gas()
			}
		}
	}

	chainTesterFn := func(withConfig bool) func(chain *BlockChain, blocks []*types.Block) {
		return func(chain *BlockChain, blocks []*types.Block) {
			stateDB, err := chain.State()
			if err != nil {
				t.Fatalf("failed to get state: %v", err)
			}

			for _, block := range blocks {
				receipts := chain.GetReceiptsByHash(block.Hash())

				fmt.Println("Block number:", block.Number().Uint64(), "txs:", len(receipts), "withConfig:", withConfig)

				// Calculate full gas used from receipts
				txGasUsed := uint64(0)
				for _, receipt := range receipts {
					txGasUsed += receipt.GasUsed

					if receipt.Status == types.ReceiptStatusFailed {
						t.Errorf("transaction failed tx_hash: %s, status: %d, block number: %d", receipt.TxHash.Hex(), receipt.Status, block.Number().Uint64())
					}
				}

				// Check if block gas used reports the sum of all txs gas used
				if block.GasUsed() != txGasUsed {
					t.Fatalf("block.GasUsed() %d doesn't match txGasUsed %d", block.GasUsed(), txGasUsed)
				}

				// Calculate the total amount of fees paid as fee market rewards
				distributedAmount := uint256.NewInt(0)
				if withConfig {
					blockRecepients := rewardRecipientMap[block.Number().Uint64()]
					for recipient, numberOfTxs := range blockRecepients {
						actual := stateDB.GetBalance(recipient)
						distributedAmount.Add(distributedAmount, actual)

						// TODO: make gas 100000 configurable
						expect := numberOfTxs * 10_000
						require.Equal(t, expect, actual.Uint64(),
							fmt.Sprintf("recipient (%s) balance %d is different that expected fee market reward %d (numberOfTxs: %d)", recipient.Hex(), actual.Uint64(), expect, numberOfTxs))
					}
				}
			}
		}
	}

	t.Run("WithConfiguration", func(t *testing.T) {
		testFeeMarketBlock(t, blockGasLimit, 1, createGenRandomFn(true), chainTesterFn(true))
	})

	t.Run("WithoutConfiguration", func(t *testing.T) {
		testFeeMarketBlock(t, blockGasLimit, 1, createGenRandomFn(false), chainTesterFn(false))
	})
}

// TestFeeMarketValidatorAndRecipientRewards tests that validator and recipient rewards are distributed correctly
// - when there is no fee market configuration, validator receives all txs profit
// - when there is a fee market configuration, the fee market rewards are distributed to fee market recipients and validator receives the rest
func TestFeeMarketValidatorAndRecipientRewards(t *testing.T) {
	// Set up logger to write to stdout at trace level
	// glogger := log.NewGlogHandler(log.NewTerminalHandler(os.Stdout, false))
	// glogger.Verbosity(log.LevelTrace)
	// log.SetDefault(log.NewLogger(glogger))

	blockGasLimit := uint64(3_000_000)
	rewardRecipient := common.HexToAddress("0x123")

	createGenFn := func(withConfig bool) func(*params.ChainConfig, *BlockChain, common.Address) func(int, *BlockGen) {
		return func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(i int, gen *BlockGen) {
			return func(i int, gen *BlockGen) {
				signer := types.LatestSigner(config)
				fee := big.NewInt(1)
				gen.SetCoinbase(common.Address{1})

				_, counterContractAddress := addFeeMarketTestContract(t, gen.TxNonce(testAddr), fee, chain, gen, signer)

				if withConfig {
					// Add configuration for the deployed contract
					addFeeMarketConfigurationTx(t, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)
				}

				// Call contract
				callData := createContractCallData("increment()", 0)
				addFeeMarketContractCall(t, counterContractAddress, callData, gen.TxNonce(testAddr), nil, fee, chain, gen, signer)
			}
		}
	}

	chainTesterFn := func(withConfig bool) func(chain *BlockChain, blocks []*types.Block) {
		return func(chain *BlockChain, blocks []*types.Block) {
			stateDB, err := chain.State()
			if err != nil {
				t.Fatalf("failed to get state: %v", err)
			}

			for _, block := range blocks {
				// txs := block.Transactions()
				receipts := chain.GetReceiptsByHash(block.Hash())

				// Calculate full gas used from receipts
				txGasUsed := uint64(0)
				// txAddConfGasUsed := uint64(0)
				for _, receipt := range receipts {
					// tx := txs[idx]
					// if tx.To() != nil && *tx.To() == common.HexToAddress(systemcontracts.FeeMarketContract) {
					// 	// fmt.Println("receipt:", "gasUsed:", receipt.GasUsed, "toAddr:", tx.To(), "status:", receipt.Status, "logs:", len(receipt.Logs))
					// 	txAddConfGasUsed += receipt.GasUsed
					// }
					txGasUsed += receipt.GasUsed

					if receipt.Status == types.ReceiptStatusFailed {
						t.Errorf("transaction failed tx_hash: %s, status: %d, block number: %d", receipt.TxHash.Hex(), receipt.Status, block.Number().Uint64())
					}
				}

				// Check if block gas used reports the sum of all txs gas used
				if block.GasUsed() != txGasUsed {
					t.Fatalf("block.GasUsed() %d doesn't match txGasUsed %d", block.GasUsed(), txGasUsed)
				}

				// Calculate the total amount of fees paid as fee market rewards
				distributedAmount := uint256.NewInt(0)
				if withConfig {
					actual := stateDB.GetBalance(rewardRecipient)
					distributedAmount.Add(distributedAmount, actual)

					expect := uint64(10000)
					require.Equal(t, expect, actual.Uint64(),
						fmt.Sprintf("recipient (%s) balance %d is different that expected fee market reward %d", rewardRecipient.Hex(), actual.Uint64(), expect))
				}
				distributedAmountU64 := distributedAmount.Uint64()

				// Check if validator reward receives:
				// - all txs profit if there is no fee market configuration
				// - txs profit excluding the fee market rewards if there is a fee market configuration
				validatorRewardU64 := stateDB.GetBalance(params.SystemAddress).Uint64()
				if withConfig {
					if validatorRewardU64+distributedAmountU64 != txGasUsed {
						t.Errorf("validator (%d) shouldn't receive all txs fees, as some has been distributed (%d) to fee market recipients (txGasUsed: %d)", validatorRewardU64, distributedAmountU64, txGasUsed)
					}
				} else {
					if validatorRewardU64 != txGasUsed {
						t.Errorf("validator (%d) should receive all txs fees", validatorRewardU64)
					}
				}
			}
		}
	}

	t.Run("WithConfiguration", func(t *testing.T) {
		testFeeMarketBlock(t, blockGasLimit, 1, createGenFn(true), chainTesterFn(true))
	})

	t.Run("WithoutConfiguration", func(t *testing.T) {
		testFeeMarketBlock(t, blockGasLimit, 1, createGenFn(false), chainTesterFn(false))
	})
}

// TestFeeMarketZeroTransfer tests that Transfer(address,address,uint256) when value is 0 doesn't perform any fee marketoperation
func TestFeeMarketZeroTransfer(t *testing.T) {
	rewardRecipient := common.HexToAddress("0x123")

	createGenFn := func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(int, *BlockGen) {
		return func(i int, gen *BlockGen) {
			signer := types.LatestSigner(config)
			fee := big.NewInt(1)
			gen.SetCoinbase(common.Address{1})

			_, counterContractAddress := addFeeMarketTestContract(t, gen.TxNonce(testAddr), fee, chain, gen, signer)

			// Add configuration for the deployed contract
			addFeeMarketConfigurationTx(t, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)

			// Call zeroTransfer() which emits a Transfer event with zero value
			callData := createContractCallData("zeroTransfer()", nil)
			addFeeMarketContractCall(t, counterContractAddress, callData, gen.TxNonce(testAddr), nil, fee, chain, gen, signer)
		}
	}

	chainTesterFn := func(chain *BlockChain, blocks []*types.Block) {
		stateDB, err := chain.State()
		if err != nil {
			t.Fatalf("failed to get state: %v", err)
		}

		for _, block := range blocks {
			txs := block.Transactions()
			receipts := chain.GetReceiptsByHash(block.Hash())

			for idx, receipt := range receipts {
				if receipt.Status == types.ReceiptStatusFailed {
					t.Errorf("transaction failed tx_hash: %s, to: %s, status: %d, gasUsed: %d", receipt.TxHash.Hex(), txs[idx].To(), receipt.Status, receipt.GasUsed)
				}
			}

			// Check that the recipient hasn't received any rewards
			expectedBalance := uint64(0)
			actualRecipientBalance := stateDB.GetBalance(rewardRecipient)
			require.Equal(t, expectedBalance, actualRecipientBalance.Uint64(),
				fmt.Sprintf("recipient (%s) balance=%d should be 0 for zero value Transfer event", rewardRecipient.Hex(), actualRecipientBalance.Uint64()))
		}
	}

	testFeeMarketBlock(t, 1_000_000, 1, createGenFn, chainTesterFn)
}

// TestFeeMarketOutOfGasForComputationalGas tests that on TX failure because of out of gas the reward fees are distributed to the user
func TestFeeMarketOutOfGasForComputationalGas(t *testing.T) {
	var counterContractAddress common.Address
	rewardRecipient := common.HexToAddress("0x123")
	// The important part of this test is that we reduce the Tx gas so as it has enough gas to distribute the fees but not for paying the computational gas
	failureTxGas := uint64(58700)

	createGenFn := func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(int, *BlockGen) {
		return func(i int, gen *BlockGen) {
			signer := types.LatestSigner(config)
			fee := big.NewInt(1)
			gen.SetCoinbase(common.Address{1})

			if i == 0 {
				_, counterContractAddress = addFeeMarketTestContract(t, gen.TxNonce(testAddr), fee, chain, gen, signer)

				// Add configuration for the deployed contract
				addFeeMarketConfigurationTx(t, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)
			}

			if i == 1 {
				// Call contract
				callData := createContractCallData("increment()", nil)
				addFeeMarketContractCall(t, counterContractAddress, callData, gen.TxNonce(testAddr), &failureTxGas, fee, chain, gen, signer)
			}
		}
	}

	chainTesterFn := func(chain *BlockChain, blocks []*types.Block) {
		// Get balance before calling the contract that distributes the fees
		stateDB, _ := chain.StateAt(blocks[0].Root())
		preBalance := stateDB.GetBalance(testAddr)
		preValidatorBalance := stateDB.GetBalance(params.SystemAddress)

		// Parse last block with the contract that distributes the fees
		stateDB, err := chain.State()
		if err != nil {
			t.Fatalf("failed to get state: %v", err)
		}

		block := blocks[len(blocks)-1]
		receipts := chain.GetReceiptsByHash(block.Hash())
		receipt := receipts[0]

		if receipt.Status != types.ReceiptStatusFailed {
			t.Errorf("transaction should fail because of out of gas")
		}

		distributedAmount := uint64(10000)
		postBalance := stateDB.GetBalance(testAddr)
		balanceDiff := preBalance.Uint64() - postBalance.Uint64()
		if balanceDiff != receipt.GasUsed-distributedAmount {
			t.Errorf("balance diff %d is different that expected %d (amount paid)", balanceDiff, receipt.GasUsed-distributedAmount)
		}

		validatorBalance := stateDB.GetBalance(params.SystemAddress)
		validatorBalanceDiff := validatorBalance.Uint64() - preValidatorBalance.Uint64()
		// Compare balance to gasUsed as fees are 1 wei per gas
		if validatorBalanceDiff != receipt.GasUsed-distributedAmount {
			t.Errorf("validator balance diff %d is different than user paid %d (amount received)", validatorBalance.Uint64(), receipt.GasUsed-distributedAmount)
		}

		// Transaction is failed, so recipient should not receive any fees
		recipientBalance := stateDB.GetBalance(rewardRecipient)
		if recipientBalance.Sign() != 0 {
			t.Errorf("recipient balance %d should be zero", recipientBalance.Uint64())
		}
	}

	testFeeMarketBlock(t, 1_000_000, 2, createGenFn, chainTesterFn)
}

// TestFeeMarketOutOfGasForDistributionGas tests that on TX failure because of out of gas the remaining reward fees are distributed to the user
func TestFeeMarketOutOfGasForDistributionGas(t *testing.T) {
}

// TestFeeMarketMultipleEventsInTx tests functionality when multiple events are emitted in a single tx
func TestFeeMarketMultipleEventsInTx(t *testing.T) {
	var counterContractAddress common.Address
	rewardRecipient := common.HexToAddress("0x123")

	createGenFn := func(eventsToEmitted uint64, callGasPrice *big.Int) func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(int, *BlockGen) {
		return func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(int, *BlockGen) {
			return func(i int, gen *BlockGen) {
				signer := types.LatestSigner(config)
				fee := big.NewInt(1)
				gen.SetCoinbase(common.Address{1})

				if i == 0 {
					_, counterContractAddress = addFeeMarketTestContract(t, gen.TxNonce(testAddr), fee, chain, gen, signer)

					// Add configuration for the deployed contract
					addFeeMarketConfigurationTx(t, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)
				}

				if i == 1 {
					// Call contract
					callData := createContractCallData("eventsEmitter(uint256)", new(big.Int).SetUint64(eventsToEmitted))
					txGas := uint64(40_000_000)
					addFeeMarketContractCall(t, counterContractAddress, callData, gen.TxNonce(testAddr), &txGas, callGasPrice, chain, gen, signer)
				}
			}
		}
	}

	chainTesterFn := func(subTesterFn func(receipt *types.Receipt, preBalances map[common.Address]*uint256.Int, stateDB vm.StateDB)) func(chain *BlockChain, blocks []*types.Block) {
		return func(chain *BlockChain, blocks []*types.Block) {
			// Get balance before calling the contract that distributes the fees
			stateDB, _ := chain.StateAt(blocks[0].Root())
			preBalances := make(map[common.Address]*uint256.Int)
			preBalances[testAddr] = stateDB.GetBalance(testAddr)
			preBalances[params.SystemAddress] = stateDB.GetBalance(params.SystemAddress)

			// Parse last block with the contract that distributes the fees
			stateDB, err := chain.State()
			if err != nil {
				t.Fatalf("failed to get state: %v", err)
			}

			block := blocks[len(blocks)-1]
			receipts := chain.GetReceiptsByHash(block.Hash())
			receipt := receipts[0]

			subTesterFn(receipt, preBalances, stateDB)
		}
	}

	testCases := []struct {
		name     string
		createFn func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(int, *BlockGen)
		testerFn func(chain *BlockChain, blocks []*types.Block)
	}{
		{
			name:     "Pass",
			createFn: createGenFn(2000, big.NewInt(1)),
			testerFn: chainTesterFn(func(receipt *types.Receipt, preBalances map[common.Address]*uint256.Int, stateDB vm.StateDB) {
				if receipt.Status == types.ReceiptStatusFailed {
					t.Errorf("transaction should pass")
				}

				// Expected amount of gas rewarded to the recipient
				// - increment() event is configured to distribute 10000 gas per event
				// - 2000 events are emitted
				expectedAmountReceived := uint64(10000) * 2000

				// Check if the recipient received the correct amount of fees
				recipientBalance := stateDB.GetBalance(rewardRecipient)
				if recipientBalance.Uint64() != expectedAmountReceived {
					t.Errorf("recipient balance %d is different than expected %d", recipientBalance.Uint64(), expectedAmountReceived)
				}
			}),
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			testFeeMarketBlock(t, 50_000_000, 2, testCase.createFn, testCase.testerFn)
		})
	}
}

// testFeeMarketBlock is a helper function to test the fee market
func testFeeMarketBlock(t *testing.T, gasLimit uint64, numberOfBlocks int, genFn func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(i int, gen *BlockGen), chainTesterFn func(chain *BlockChain, blocks []*types.Block)) {
	config := params.SatoshiTestChainConfig
	gspec := &Genesis{
		Config:   config,
		GasLimit: gasLimit,
		Alloc: types.GenesisAlloc{
			testAddr: {Balance: new(big.Int).SetUint64(15 * params.Ether)},
		},
	}

	feeMarketAddress, feeMarketAccount := getFeeMarketGenesisAlloc(2, 2, 1000000)
	gspec.Alloc[feeMarketAddress] = feeMarketAccount

	// Initialize blockchain
	frdir := t.TempDir()
	db, err := rawdb.NewDatabaseWithFreezer(rawdb.NewMemoryDatabase(), frdir, "", false, false, false, false, false)
	if err != nil {
		t.Fatalf("failed to create database with ancient backend")
	}
	engine := &mockSatoshi{}
	chain, _ := NewBlockChain(db, nil, gspec, nil, engine, vm.Config{}, nil, nil)

	// Generate chain blocks
	_, bs, _ := GenerateChainWithGenesis(gspec, engine, numberOfBlocks, genFn(config, chain, feeMarketAddress))

	// Insert chain
	if _, err := chain.InsertChain(bs); err != nil {
		t.Fatalf("failed to insert chain: %v", err)
	}

	// Verify the chain
	chainTesterFn(chain, bs)
}

// BenchmarkFeeMarketFullBlock is a benchmark for the fee market, which compares the performance of pre and post fee market implementation
func BenchmarkFeeMarketFullBlock(b *testing.B) {
	b.StopTimer()
	b.ResetTimer()

	blockGasLimit := uint64(50_000_000)

	createGenFn := func(withConfig bool) func(*params.ChainConfig, *BlockChain, common.Address) func(int, *BlockGen) {
		return func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(i int, gen *BlockGen) {
			return func(i int, gen *BlockGen) {
				signer := types.LatestSigner(config)
				fee := big.NewInt(1)
				gen.SetCoinbase(common.Address{1})

				rewardRecipient := common.HexToAddress("0x123")

				// Deploy counter contract
				_, counterContractAddress := addFeeMarketTestContract(b, gen.TxNonce(testAddr), fee, chain, gen, signer)

				// Add configuration only if enabled
				if withConfig {
					addFeeMarketConfigurationTx(b, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)
				}

				// Add transactions until the block is full
				for z := 0; gen.gasPool.Gas() > 500_000; z++ {
					callData := createContractCallData("increment()", nil)
					addFeeMarketContractCall(b, counterContractAddress, callData, gen.TxNonce(testAddr), nil, fee, chain, gen, signer)
				}
			}
		}
	}

	b.Run("WithConfiguration", func(b *testing.B) {
		benchmarkFeeMarketBlock(b, blockGasLimit, 1, createGenFn(true))
	})

	b.Run("WithoutConfiguration", func(b *testing.B) {
		benchmarkFeeMarketBlock(b, blockGasLimit, 1, createGenFn(false))
	})
}

// BenchmarkFeeMarketMultipleEventsInASingleTx is a benchmark ...
func BenchmarkFeeMarketMultipleEventsInASingleTx(b *testing.B) {
	b.StopTimer()
	b.ResetTimer()

	blockGasLimit := uint64(50_000_000)
	rewardRecipient := common.HexToAddress("0x123")
	var counterContractAddress common.Address

	createGenFn := func(withConfig bool) func(*params.ChainConfig, *BlockChain, common.Address) func(int, *BlockGen) {
		return func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(int, *BlockGen) {
			return func(i int, gen *BlockGen) {
				signer := types.LatestSigner(config)
				fee := big.NewInt(1)
				gen.SetCoinbase(common.Address{1})

				if i == 0 {
					_, counterContractAddress = addFeeMarketTestContract(b, gen.TxNonce(testAddr), fee, chain, gen, signer)

					// Add configuration for the deployed contract
					addFeeMarketConfigurationTx(b, feeMarketAddress, counterContractAddress, rewardRecipient, gen.TxNonce(testAddr), fee, chain, gen, signer)
				}

				if i == 1 {
					// Call contract
					callData := createContractCallData("eventsEmitter(uint256)", big.NewInt(2000))
					txGas := uint64(40_000_000)
					addFeeMarketContractCall(b, counterContractAddress, callData, gen.TxNonce(testAddr), &txGas, fee, chain, gen, signer)
				}
			}
		}
	}

	b.Run("WithConfiguration", func(b *testing.B) {
		benchmarkFeeMarketBlock(b, blockGasLimit, 2, createGenFn(true))
	})

	b.Run("WithoutConfiguration", func(b *testing.B) {
		benchmarkFeeMarketBlock(b, blockGasLimit, 2, createGenFn(false))
	})
}

// benchmarkFeeMarketBlock is a helper function to benchmark the fee market
func benchmarkFeeMarketBlock(b *testing.B, gasLimit uint64, numberOfBlocks int, genFn func(config *params.ChainConfig, chain *BlockChain, feeMarketAddress common.Address) func(i int, gen *BlockGen)) {
	config := params.SatoshiTestChainConfig
	gspec := &Genesis{
		Config:   config,
		GasLimit: gasLimit,
		Alloc: types.GenesisAlloc{
			testAddr: {Balance: new(big.Int).SetUint64(15 * params.Ether)},
		},
	}

	feeMarketAddress, feeMarketAccount := getFeeMarketGenesisAlloc(2, 2, 1000000)
	gspec.Alloc[feeMarketAddress] = feeMarketAccount

	// Initialize blockchain
	frdir := b.TempDir()
	db, err := rawdb.NewDatabaseWithFreezer(rawdb.NewMemoryDatabase(), frdir, "", false, false, false, false, false)
	if err != nil {
		b.Fatalf("failed to create database with ancient backend")
	}
	engine := &mockSatoshi{}
	chain, _ := NewBlockChain(db, nil, gspec, nil, engine, vm.Config{}, nil, nil)

	// Generate chain blocks
	_, bs, _ := GenerateChainWithGenesis(gspec, engine, numberOfBlocks, genFn(config, chain, feeMarketAddress))

	b.StopTimer()
	b.ResetTimer()

	// Actual benchmark: Insert chain
	for i := 0; i < b.N; i++ {
		b.StartTimer()
		if _, err := chain.InsertChain(bs); err != nil {
			b.Fatalf("failed to insert chain: %v", err)
		}
		b.StopTimer()
	}
}
